import 'package:awesome_snackbar_content/awesome_snackbar_content.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:shimmer/shimmer.dart'; // ‚úÖ For loading effect
import 'package:todo_list/bloc%20/bloc_controller/todo_bloc.dart'; // ‚úÖ BLoC for task management
import 'package:todo_list/bloc%20/bloc_controller/todo_events.dart';
import 'package:todo_list/bloc%20/bloc_controller/todo_state.dart';
import 'package:todo_list/model/todo_list.dart'; // ‚úÖ Task model
import 'package:flutter_slidable/flutter_slidable.dart'; // ‚úÖ Swipe actions
import 'package:todo_list/navigator/navigation.dart'; // ‚úÖ Navigation management

/// ‚úÖ Builds an individual task tile
Widget buildTaskTile(BuildContext context, Todo todo,
    {bool isLoading = false}) {
  return Slidable(
    // ‚úÖ Enables swipe actions on each task
    key: Key(todo.id), // ‚úÖ Unique key for each task
    endActionPane: ActionPane(
      // ‚úÖ Defines actions when swiping from right
      motion: const BehindMotion(), // ‚úÖ Smooth slide animation
      children: [
        SlidableAction(
          // üöÄ Delete action
          onPressed: (context) async {
            final todoBloc =
                context.read<TodoBloc>(); // ‚úÖ Access the BLoC instance

            // ‚úÖ Show confirmation dialog before deleting
            bool? confirmDelete = await showDialog(
              context: context,
              builder: (BuildContext context) {
                return AlertDialog(
                  title: const Text("Delete Task"),
                  content:
                      const Text("Are you sure you want to delete this task?"),
                  actions: [
                    TextButton(
                      // ‚ùå Cancel button
                      onPressed: () => Navigator.of(context).pop(false),
                      child: const Text("Cancel"),
                    ),
                    TextButton(
                      // ‚úÖ Confirm delete button
                      onPressed: () => Navigator.of(context).pop(true),
                      child: const Text("Delete",
                          style: TextStyle(color: Colors.red)),
                    ),
                  ],
                );
              },
            );

            // ‚úÖ Delete task if confirmed
            if (confirmDelete == true) {
              todoBloc.add(DeleteTodo(todo.id)); // üöÄ Dispatch delete event
              scaffoldMessengerKey.currentState?.showSnackBar(
                // ‚úÖ Show snackbar
                SnackBar(
                  elevation: 0,
                  behavior: SnackBarBehavior.floating,
                  backgroundColor: Colors.transparent,
                  content: AwesomeSnackbarContent(
                    title: 'Task Deleted',
                    message: "'${todo.title}' has been removed successfully!",
                    contentType: ContentType.failure,
                  ),
                ),
              );
            }
          },
          backgroundColor: Colors.red, // üé® Delete button color
          foregroundColor: Colors.white, // üé® Icon color
          icon: Icons.delete, // üóëÔ∏è Delete icon
          label: 'Delete',
          borderRadius: BorderRadius.circular(16), // üé® Rounded corners
        ),
      ],
    ),

    // ‚úÖ Main container for the task tile
    child: Container(
      height: 130, // üìè Tile height
      margin:
          const EdgeInsets.symmetric(horizontal: 16, vertical: 4), // üé® Spacing
      decoration: BoxDecoration(
        color: isLoading
            ? Colors.grey[300] // üé® Grey when loading
            : (todo.isCompleted
                ? Colors.grey
                : todo.color), // ‚úÖ Use task color if available
        borderRadius: BorderRadius.circular(16), // üé® Rounded edges
        boxShadow: const [
          BoxShadow(
            // üé® Adds shadow effect
            color: Colors.black26,
            blurRadius: 4,
            offset: Offset(-1, -12),
          ),
        ],
      ),
      child: ListTile(
        // ‚úÖ Task details inside the tile
        contentPadding:
            const EdgeInsets.symmetric(horizontal: 10, vertical: 10),

        // ‚úÖ Title text (animated shimmer when loading)
        title: isLoading
            ? Shimmer.fromColors(
                // üé® Loading effect
                baseColor: Colors.grey[300]!,
                highlightColor: Colors.grey[100]!,
                child: Container(
                  height: 18,
                  width: double.infinity,
                  color: Colors.white,
                ),
              )
            : Text(
                todo.title, // ‚úÖ Show task title
                style: TextStyle(
                  fontFamily: "intro",
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                  color: todo.isCompleted
                      ? Colors.black
                      : Colors.white, // üé® Change color if completed
                ),
              ),

        // ‚úÖ Action buttons (Edit and Checkbox)
        trailing: Row(
          mainAxisSize: MainAxisSize.min, // ‚úÖ Ensures row takes minimal space
          children: [
            if (!isLoading) // ‚úÖ Show edit button only when not loading
              IconButton(
                icon: const Icon(Icons.edit,
                    color: Colors.white), // üñäÔ∏è Edit icon
                onPressed: () => showUpdateDialog(
                    context, todo.id, todo.title), // ‚úÖ Show edit dialog
              ),
            Transform.scale(
              // ‚úÖ Enlarges checkbox
              scale: 2,
              child: Checkbox(
                value: isLoading
                    ? false
                    : todo.isCompleted, // ‚úÖ Shows task completion state
                onChanged: isLoading
                    ? null
                    : (bool? value) {
                        if (value != null) {
                          context.read<TodoBloc>().add(ToggleTodoStatus(
                              todo.id, value)); // üöÄ Toggle task status
                        }
                      },
                shape: RoundedRectangleBorder(
                    borderRadius:
                        BorderRadius.circular(6.0)), // üé® Rounded checkbox
                activeColor: Colors.white, // ‚úÖ Checkbox color
                checkColor: Colors.black, // ‚úÖ Tick mark color
              ),
            ),
          ],
        ),
      ),
    ),
  );
}

/// ‚úÖ Shows a dialog to update task title
void showUpdateDialog(BuildContext context, String id, String currentTitle) {
  final TextEditingController updateController = TextEditingController(
      text: currentTitle); // üìù Pre-fill with current title

  showDialog(
    context: context,
    builder: (context) => AlertDialog(
      title: const Text('Update Task'),
      content: TextField(
        controller: updateController, // ‚úÖ Input field for new title
        decoration: const InputDecoration(labelText: 'Update the task'),
      ),
      actions: [
        TextButton(
          onPressed: () =>
              Navigator.pop(context), // ‚ùå Close dialog without saving
          child: const Text('Cancel'),
        ),
        ElevatedButton(
          onPressed: () {
            if (updateController.text.isNotEmpty) {
              // ‚úÖ Ensure input is not empty
              final currentState = context.read<TodoBloc>().state;

              if (currentState is TodoLoaded) {
                // ‚úÖ Check if tasks are loaded
                final existingTodo = currentState.todos.firstWhere(
                  (t) => t.id == id,
                  orElse: () => Todo(
                    id: '',
                    title: '',
                    isCompleted: false,
                    color: Colors.white,
                  ),
                );

                final updatedTodo = existingTodo.copyWith(
                    title: updateController.text); // ‚úÖ Update task
                context
                    .read<TodoBloc>()
                    .add(UpdateTodo(updatedTodo)); // üöÄ Dispatch update event
                Navigator.pop(context); // ‚úÖ Close dialog
              }
            }
          },
          child: const Text('Update'),
        ),
      ],
    ),
  );
}
